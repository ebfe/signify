package signify

import (
	"bytes"
	"crypto/ed25519"
	"crypto/rand"
	"io"
	"io/ioutil"
	"testing"
)

type testfile struct {
	file       string
	passphrase []byte
	comment    string
	content    []byte
	parsedRaw  interface{}
	parsed     interface{}
}

var testfiles = []testfile{
	{
		file:       "_testdata/test.key",
		passphrase: []byte("passphrase"),
		comment:    "signify secret key",
		content: []byte{
			0x45, 0x64, 0x42, 0x4b, 0x00, 0x00, 0x00, 0x2a, 0xbb, 0x07, 0x17, 0x79, 0xb5, 0x84, 0x56, 0xe5,
			0xf6, 0x61, 0xdc, 0xe0, 0x44, 0x7b, 0x98, 0xd7, 0x42, 0x42, 0xc0, 0x8d, 0xc7, 0xc0, 0x52, 0x16,
			0xd3, 0xff, 0xb0, 0x73, 0xe8, 0x92, 0x09, 0x30, 0xd3, 0xdb, 0x4f, 0x63, 0xb2, 0x59, 0xa4, 0x78,
			0x26, 0x5a, 0x50, 0x04, 0xd3, 0x5a, 0xb5, 0xf8, 0x92, 0xb2, 0x75, 0x4c, 0x30, 0x12, 0x12, 0x63,
			0x6f, 0x15, 0x29, 0xd9, 0xdf, 0x41, 0x4c, 0xde, 0x4c, 0x14, 0x60, 0xb9, 0xb1, 0x14, 0x1c, 0xbc,
			0xc3, 0xde, 0xd1, 0xe7, 0x79, 0x6d, 0xd0, 0x12, 0xd7, 0xed, 0x92, 0x88, 0xf4, 0xf1, 0x6a, 0x2f,
			0x13, 0x38, 0x3d, 0x60, 0xb9, 0x35, 0x43, 0xd5,
		},
		parsedRaw: rawEncryptedKey{
			PKAlgo:    [2]byte{'E', 'd'},
			KDFAlgo:   [2]byte{'B', 'K'},
			KDFRounds: 42,
			Salt: [16]byte{
				0xbb, 0x07, 0x17, 0x79, 0xb5, 0x84, 0x56, 0xe5, 0xf6, 0x61, 0xdc, 0xe0, 0x44, 0x7b, 0x98, 0xd7,
			},
			Checksum:    [8]byte{0x42, 0x42, 0xc0, 0x8d, 0xc7, 0xc0, 0x52, 0x16},
			Fingerprint: [8]byte{0xd3, 0xff, 0xb0, 0x73, 0xe8, 0x92, 0x09, 0x30},
			EncryptedKey: [ed25519.PrivateKeySize]byte{
				0xd3, 0xdb, 0x4f, 0x63, 0xb2, 0x59, 0xa4, 0x78, 0x26, 0x5a, 0x50, 0x04, 0xd3, 0x5a, 0xb5, 0xf8,
				0x92, 0xb2, 0x75, 0x4c, 0x30, 0x12, 0x12, 0x63, 0x6f, 0x15, 0x29, 0xd9, 0xdf, 0x41, 0x4c, 0xde,
				0x4c, 0x14, 0x60, 0xb9, 0xb1, 0x14, 0x1c, 0xbc, 0xc3, 0xde, 0xd1, 0xe7, 0x79, 0x6d, 0xd0, 0x12,
				0xd7, 0xed, 0x92, 0x88, 0xf4, 0xf1, 0x6a, 0x2f, 0x13, 0x38, 0x3d, 0x60, 0xb9, 0x35, 0x43, 0xd5,
			},
		},
		parsed: PrivateKey{
			Bytes: [ed25519.PrivateKeySize]byte{
				0x49, 0x43, 0xb6, 0x60, 0x97, 0x9b, 0xea, 0xa6, 0xf2, 0x85, 0x6a, 0x86, 0x53, 0x98, 0x4d, 0x8a,
				0x13, 0x0a, 0x54, 0x78, 0x1e, 0xc8, 0x65, 0x7b, 0x71, 0xf8, 0x90, 0xb7, 0xe2, 0x4f, 0x17, 0x8d,
				0xc8, 0x02, 0xe8, 0xf6, 0x4c, 0x35, 0x63, 0xc2, 0x2e, 0xa3, 0x03, 0x56, 0xaf, 0x63, 0xf6, 0x92,
				0xce, 0x2a, 0x63, 0x5c, 0xf6, 0x6e, 0x7d, 0x48, 0x6c, 0xa8, 0x48, 0x8d, 0xe2, 0x04, 0xa6, 0x05,
			},
			Fingerprint: [8]byte{0xd3, 0xff, 0xb0, 0x73, 0xe8, 0x92, 0x09, 0x30},
		},
	}, {
		file:    "_testdata/test.pub",
		comment: "signify public key",
		content: []byte{
			0x45, 0x64, 0xd3, 0xff, 0xb0, 0x73, 0xe8, 0x92, 0x09, 0x30, 0xc8, 0x02, 0xe8, 0xf6, 0x4c, 0x35,
			0x63, 0xc2, 0x2e, 0xa3, 0x03, 0x56, 0xaf, 0x63, 0xf6, 0x92, 0xce, 0x2a, 0x63, 0x5c, 0xf6, 0x6e,
			0x7d, 0x48, 0x6c, 0xa8, 0x48, 0x8d, 0xe2, 0x04, 0xa6, 0x05,
		},
		parsedRaw: rawPublicKey{
			PKAlgo:      [2]byte{'E', 'd'},
			Fingerprint: [8]byte{0xd3, 0xff, 0xb0, 0x73, 0xe8, 0x92, 0x09, 0x30},
			PublicKey: [ed25519.PublicKeySize]byte{
				0xc8, 0x02, 0xe8, 0xf6, 0x4c, 0x35, 0x63, 0xc2, 0x2e, 0xa3, 0x03, 0x56, 0xaf, 0x63, 0xf6, 0x92,
				0xce, 0x2a, 0x63, 0x5c, 0xf6, 0x6e, 0x7d, 0x48, 0x6c, 0xa8, 0x48, 0x8d, 0xe2, 0x04, 0xa6, 0x05,
			},
		},
		parsed: PublicKey{
			Bytes: [ed25519.PublicKeySize]byte{
				0xc8, 0x02, 0xe8, 0xf6, 0x4c, 0x35, 0x63, 0xc2, 0x2e, 0xa3, 0x03, 0x56, 0xaf, 0x63, 0xf6, 0x92,
				0xce, 0x2a, 0x63, 0x5c, 0xf6, 0x6e, 0x7d, 0x48, 0x6c, 0xa8, 0x48, 0x8d, 0xe2, 0x04, 0xa6, 0x05,
			},
			Fingerprint: [8]byte{0xd3, 0xff, 0xb0, 0x73, 0xe8, 0x92, 0x09, 0x30},
		},
	}, {
		file:    "_testdata/test.msg.sig",
		comment: "signature from signify secret key",
		content: []byte{
			0x45, 0x64, 0xd3, 0xff, 0xb0, 0x73, 0xe8, 0x92, 0x09, 0x30, 0x9e, 0x9f, 0x91, 0x69, 0x08, 0x5d,
			0xa7, 0xb9, 0x1c, 0x82, 0x3c, 0x81, 0x69, 0x16, 0x16, 0x58, 0x7a, 0xd2, 0x53, 0xb4, 0xe9, 0x96,
			0x0b, 0x42, 0x3c, 0x8a, 0x40, 0x40, 0x47, 0x7e, 0xb0, 0x41, 0x74, 0x26, 0x47, 0x41, 0xa4, 0xe8,
			0x2f, 0xec, 0xfb, 0xde, 0xe2, 0x77, 0x58, 0x19, 0xca, 0xb0, 0x57, 0x5f, 0x73, 0x5f, 0x8b, 0xe2,
			0xac, 0x11, 0x00, 0x14, 0x55, 0xd6, 0xac, 0xd3, 0xd3, 0x03},
		parsedRaw: rawSignature{
			PKAlgo:      [2]byte{'E', 'd'},
			Fingerprint: [8]byte{0xd3, 0xff, 0xb0, 0x73, 0xe8, 0x92, 0x09, 0x30},
			Signature: [ed25519.SignatureSize]byte{
				0x9e, 0x9f, 0x91, 0x69, 0x08, 0x5d, 0xa7, 0xb9, 0x1c, 0x82, 0x3c, 0x81, 0x69, 0x16, 0x16, 0x58,
				0x7a, 0xd2, 0x53, 0xb4, 0xe9, 0x96, 0x0b, 0x42, 0x3c, 0x8a, 0x40, 0x40, 0x47, 0x7e, 0xb0, 0x41,
				0x74, 0x26, 0x47, 0x41, 0xa4, 0xe8, 0x2f, 0xec, 0xfb, 0xde, 0xe2, 0x77, 0x58, 0x19, 0xca, 0xb0,
				0x57, 0x5f, 0x73, 0x5f, 0x8b, 0xe2, 0xac, 0x11, 0x00, 0x14, 0x55, 0xd6, 0xac, 0xd3, 0xd3, 0x03,
			},
		},
		parsed: Signature{
			Bytes: [ed25519.SignatureSize]byte{
				0x9e, 0x9f, 0x91, 0x69, 0x08, 0x5d, 0xa7, 0xb9, 0x1c, 0x82, 0x3c, 0x81, 0x69, 0x16, 0x16, 0x58,
				0x7a, 0xd2, 0x53, 0xb4, 0xe9, 0x96, 0x0b, 0x42, 0x3c, 0x8a, 0x40, 0x40, 0x47, 0x7e, 0xb0, 0x41,
				0x74, 0x26, 0x47, 0x41, 0xa4, 0xe8, 0x2f, 0xec, 0xfb, 0xde, 0xe2, 0x77, 0x58, 0x19, 0xca, 0xb0,
				0x57, 0x5f, 0x73, 0x5f, 0x8b, 0xe2, 0xac, 0x11, 0x00, 0x14, 0x55, 0xd6, 0xac, 0xd3, 0xd3, 0x03,
			},
			Fingerprint: [8]byte{0xd3, 0xff, 0xb0, 0x73, 0xe8, 0x92, 0x09, 0x30},
		},
	}, {
		file:    "_testdata/test.nopass.key",
		comment: "nopass secret key",
		content: []byte{
			0x45, 0x64, 0x42, 0x4b, 0x00, 0x00, 0x00, 0x00, 0xf3, 0xff, 0x55, 0x86, 0xf2, 0x22, 0x74, 0xf4,
			0x35, 0x0f, 0xfc, 0x03, 0x2d, 0x31, 0x36, 0xb9, 0xb5, 0xc8, 0x61, 0xc5, 0xaf, 0x95, 0xb3, 0x8d,
			0x1f, 0x18, 0x5a, 0xca, 0x53, 0x7e, 0xd1, 0x45, 0xbb, 0x66, 0x94, 0xc0, 0x9f, 0x65, 0x2a, 0xae,
			0x0f, 0x24, 0x82, 0x9e, 0xbe, 0xae, 0xac, 0x9f, 0xec, 0x4c, 0x1c, 0xd9, 0x39, 0x1d, 0x3e, 0x4f,
			0x68, 0x61, 0x07, 0xf8, 0x50, 0x07, 0x1b, 0xc1, 0x94, 0xd0, 0x2a, 0x16, 0x22, 0xf2, 0x99, 0x28,
			0xea, 0x15, 0x9f, 0xbc, 0xd4, 0x2b, 0x69, 0x71, 0x03, 0xed, 0xa8, 0xd3, 0x7a, 0x59, 0x54, 0x82,
			0xeb, 0x2f, 0x87, 0xf4, 0x4d, 0x52, 0xb6, 0x49,
		},
		parsedRaw: rawEncryptedKey{
			PKAlgo:      [2]byte{'E', 'd'},
			KDFAlgo:     [2]byte{'B', 'K'},
			KDFRounds:   0,
			Salt:        [16]byte{0xf3, 0xff, 0x55, 0x86, 0xf2, 0x22, 0x74, 0xf4, 0x35, 0xf, 0xfc, 0x03, 0x2d, 0x31, 0x36, 0xb9},
			Checksum:    [8]byte{0xb5, 0xc8, 0x61, 0xc5, 0xaf, 0x95, 0xb3, 0x8d},
			Fingerprint: [8]byte{0x1f, 0x18, 0x5a, 0xca, 0x53, 0x7e, 0xd1, 0x45},
			EncryptedKey: [ed25519.PrivateKeySize]byte{
				0xbb, 0x66, 0x94, 0xc0, 0x9f, 0x65, 0x2a, 0xae, 0x0f, 0x24, 0x82, 0x9e, 0xbe, 0xae, 0xac, 0x9f,
				0xec, 0x4c, 0x1c, 0xd9, 0x39, 0x1d, 0x3e, 0x4f, 0x68, 0x61, 0x07, 0xf8, 0x50, 0x07, 0x1b, 0xc1,
				0x94, 0xd0, 0x2a, 0x16, 0x22, 0xf2, 0x99, 0x28, 0xea, 0x15, 0x9f, 0xbc, 0xd4, 0x2b, 0x69, 0x71,
				0x03, 0xed, 0xa8, 0xd3, 0x7a, 0x59, 0x54, 0x82, 0xeb, 0x2f, 0x87, 0xf4, 0x4d, 0x52, 0xb6, 0x49,
			},
		},
		parsed: PrivateKey{
			Bytes: [ed25519.PrivateKeySize]byte{
				0xbb, 0x66, 0x94, 0xc0, 0x9f, 0x65, 0x2a, 0xae, 0x0f, 0x24, 0x82, 0x9e, 0xbe, 0xae, 0xac, 0x9f,
				0xec, 0x4c, 0x1c, 0xd9, 0x39, 0x1d, 0x3e, 0x4f, 0x68, 0x61, 0x07, 0xf8, 0x50, 0x07, 0x1b, 0xc1,
				0x94, 0xd0, 0x2a, 0x16, 0x22, 0xf2, 0x99, 0x28, 0xea, 0x15, 0x9f, 0xbc, 0xd4, 0x2b, 0x69, 0x71,
				0x03, 0xed, 0xa8, 0xd3, 0x7a, 0x59, 0x54, 0x82, 0xeb, 0x2f, 0x87, 0xf4, 0x4d, 0x52, 0xb6, 0x49,
			},
			Fingerprint: [8]byte{0x1f, 0x18, 0x5a, 0xca, 0x53, 0x7e, 0xd1, 0x45},
		},
	}, {
		file:    "_testdata/test.nopass.pub",
		comment: "nopass public key",
		content: []byte{
			0x45, 0x64, 0x1f, 0x18, 0x5a, 0xca, 0x53, 0x7e, 0xd1, 0x45, 0x94, 0xd0, 0x2a, 0x16, 0x22, 0xf2,
			0x99, 0x28, 0xea, 0x15, 0x9f, 0xbc, 0xd4, 0x2b, 0x69, 0x71, 0x03, 0xed, 0xa8, 0xd3, 0x7a, 0x59,
			0x54, 0x82, 0xeb, 0x2f, 0x87, 0xf4, 0x4d, 0x52, 0xb6, 0x49},
		parsedRaw: rawPublicKey{
			PKAlgo:      [2]byte{'E', 'd'},
			Fingerprint: [8]byte{0x1f, 0x18, 0x5a, 0xca, 0x53, 0x7e, 0xd1, 0x45},
			PublicKey: [ed25519.PublicKeySize]byte{
				0x94, 0xd0, 0x2a, 0x16, 0x22, 0xf2, 0x99, 0x28, 0xea, 0x15, 0x9f, 0xbc, 0xd4, 0x2b, 0x69, 0x71,
				0x03, 0xed, 0xa8, 0xd3, 0x7a, 0x59, 0x54, 0x82, 0xeb, 0x2f, 0x87, 0xf4, 0x4d, 0x52, 0xb6, 0x49,
			},
		},
		parsed: PublicKey{
			Bytes: [ed25519.PublicKeySize]byte{
				0x94, 0xd0, 0x2a, 0x16, 0x22, 0xf2, 0x99, 0x28, 0xea, 0x15, 0x9f, 0xbc, 0xd4, 0x2b, 0x69, 0x71,
				0x03, 0xed, 0xa8, 0xd3, 0x7a, 0x59, 0x54, 0x82, 0xeb, 0x2f, 0x87, 0xf4, 0x4d, 0x52, 0xb6, 0x49,
			},
			Fingerprint: [8]byte{0x1f, 0x18, 0x5a, 0xca, 0x53, 0x7e, 0xd1, 0x45},
		},
	}, {
		file:    "_testdata/test.nopass.msg.sig",
		comment: "signature from nopass secret key",
		content: []byte{
			0x45, 0x64, 0x1f, 0x18, 0x5a, 0xca, 0x53, 0x7e, 0xd1, 0x45, 0x12, 0xb1, 0xb1, 0xc8, 0xf5, 0xde,
			0xaf, 0xd4, 0xbb, 0x74, 0x14, 0x1d, 0x33, 0x7c, 0xbc, 0x0e, 0x83, 0xd6, 0x1f, 0x9e, 0x71, 0x9b,
			0x21, 0x0c, 0x1f, 0x79, 0x6e, 0x6d, 0x44, 0xb2, 0xe2, 0xfd, 0x1c, 0x35, 0x41, 0x1d, 0x89, 0xa8,
			0x34, 0x6f, 0x91, 0x11, 0x3e, 0xc3, 0xee, 0x28, 0x56, 0x59, 0x4a, 0xcb, 0x28, 0xa1, 0x14, 0xf8,
			0x77, 0x2f, 0x7a, 0x16, 0x58, 0x0e, 0x4f, 0x7e, 0xa6, 0x00,
		},
		parsedRaw: rawSignature{
			PKAlgo:      [2]byte{'E', 'd'},
			Fingerprint: [8]byte{0x1f, 0x18, 0x5a, 0xca, 0x53, 0x7e, 0xd1, 0x45},
			Signature: [ed25519.SignatureSize]byte{
				0x12, 0xb1, 0xb1, 0xc8, 0xf5, 0xde, 0xaf, 0xd4, 0xbb, 0x74, 0x14, 0x1d, 0x33, 0x7c, 0xbc, 0x0e,
				0x83, 0xd6, 0x1f, 0x9e, 0x71, 0x9b, 0x21, 0x0c, 0x1f, 0x79, 0x6e, 0x6d, 0x44, 0xb2, 0xe2, 0xfd,
				0x1c, 0x35, 0x41, 0x1d, 0x89, 0xa8, 0x34, 0x6f, 0x91, 0x11, 0x3e, 0xc3, 0xee, 0x28, 0x56, 0x59,
				0x4a, 0xcb, 0x28, 0xa1, 0x14, 0xf8, 0x77, 0x2f, 0x7a, 0x16, 0x58, 0x0e, 0x4f, 0x7e, 0xa6, 0x00,
			},
		},
		parsed: Signature{
			Bytes: [ed25519.SignatureSize]byte{
				0x12, 0xb1, 0xb1, 0xc8, 0xf5, 0xde, 0xaf, 0xd4, 0xbb, 0x74, 0x14, 0x1d, 0x33, 0x7c, 0xbc, 0x0e,
				0x83, 0xd6, 0x1f, 0x9e, 0x71, 0x9b, 0x21, 0x0c, 0x1f, 0x79, 0x6e, 0x6d, 0x44, 0xb2, 0xe2, 0xfd,
				0x1c, 0x35, 0x41, 0x1d, 0x89, 0xa8, 0x34, 0x6f, 0x91, 0x11, 0x3e, 0xc3, 0xee, 0x28, 0x56, 0x59,
				0x4a, 0xcb, 0x28, 0xa1, 0x14, 0xf8, 0x77, 0x2f, 0x7a, 0x16, 0x58, 0x0e, 0x4f, 0x7e, 0xa6, 0x00,
			},
			Fingerprint: [8]byte{0x1f, 0x18, 0x5a, 0xca, 0x53, 0x7e, 0xd1, 0x45},
		},
	},
}

func getTestFile(t *testing.T, file string) *testfile {
	for i := range testfiles {
		if testfiles[i].file == file {
			return &testfiles[i]
		}
	}
	t.Fatalf("missing test file: %q", file)
	return nil
}

func testReadFile(t *testing.T, file, comment string, content []byte) {
	buf, err := ioutil.ReadFile(file)
	if err != nil {
		t.Fatalf("%s: %s\n", file, err)
	}

	rcomment, rcontent, err := ReadFile(bytes.NewReader(buf))
	if err != nil {
		t.Fatal(err)
	}

	if rcomment != comment {
		t.Errorf("%s: comment\nexpected: %q\ngot %q\n", file, comment, rcomment)
		return
	}

	if !bytes.Equal(rcontent, content) {
		t.Errorf("%s: content\nexpected: %x\ngot %x\n", file, content, rcontent)
	}
}

func TestReadFile(t *testing.T) {
	for _, tc := range testfiles {
		testReadFile(t, tc.file, tc.comment, tc.content)
	}
}

func TestReadFileError(t *testing.T) {
	buf := []byte(`untrusted comment: signify secret key
RWRCSwAAACq7Bxd5tYRW5fZh3OBEe5jXQkLAjcfAUhbT/7Bz6JIJMNPbT2OyWaR4JlpQBNNatfiSsnVMMBISY28VKdnfQUzeTBRgubEUHLzD3tHneW3QEtftkoj08WovEzg9YLk1Q9U=
`)
	_, _, err := ReadFile(io.LimitReader(bytes.NewReader(buf), 28))
	if err == nil {
		t.Errorf("no error on incomplete input")
	}
	_, _, err = ReadFile(io.LimitReader(bytes.NewReader(buf), 48))
	if err == nil {
		t.Errorf("no error on incomplete input")
	}
	buf[0] = '!'
	_, _, err = ReadFile(bytes.NewReader(buf))
	if err == nil {
		t.Errorf("no error on invalid input")
	}
	buf = []byte(`untrusted comment: signify secret key`)
	_, _, err = ReadFile(bytes.NewReader(buf))
	if err == nil {
		t.Errorf("no error on incomplete input")
	}
	_, _, err = ReadFile(bytes.NewReader([]byte{}))
	if err == nil {
		t.Errorf("no error on empty input")
	}
}

func testWriteFile(t *testing.T, file, comment string, content []byte) {
	want, err := ioutil.ReadFile(file)
	if err != nil {
		t.Fatalf("%s: %s\n", file, err)
	}

	wbuf := bytes.Buffer{}
	err = WriteFile(&wbuf, comment, content)
	if err != nil {
		t.Errorf("%s: %s\n", file, err)
		return
	}

	if !bytes.Equal(want, wbuf.Bytes()) {
		t.Errorf("%s: output mismatch\nexpected: %q\ngot %q\n", file, string(want), wbuf.String())
	}
}

func TestWriteFile(t *testing.T) {
	for _, tc := range testfiles {
		testWriteFile(t, tc.file, tc.comment, tc.content)
	}
}

func TestParseRawEncryptedKey(t *testing.T) {
	for _, tc := range testfiles {
		want, ok := tc.parsedRaw.(rawEncryptedKey)
		if !ok {
			continue
		}

		ek, err := parseRawEncryptedKey(tc.content)
		if err != nil {
			t.Errorf("%s: %s\n", tc.file, err)
			continue
		}

		if want != *ek {
			t.Errorf("%s: expected: %+v got: %+v\n", tc.file, want, ek)
		}
	}
}

func TestParseRawPublicKey(t *testing.T) {
	for _, tc := range testfiles {
		want, ok := tc.parsedRaw.(rawPublicKey)
		if !ok {
			continue
		}

		pub, err := parseRawPublicKey(tc.content)
		if err != nil {
			t.Errorf("%s: %s\n", tc.file, err)
			continue
		}

		if want != *pub {
			t.Errorf("%s: expected: %+v got: %+v\n", tc.file, want, pub)
		}
	}
}

func TestParseRawSignature(t *testing.T) {
	for _, tc := range testfiles {
		want, ok := tc.parsedRaw.(rawSignature)
		if !ok {
			continue
		}

		sig, err := parseRawSignature(tc.content)
		if err != nil {
			t.Errorf("%s: %s\n", tc.file, err)
			continue
		}

		if want != *sig {
			t.Errorf("%s: expected: %+v got: %+v\n", tc.file, want, sig)
		}
	}
}

func TestParsePrivateKey(t *testing.T) {
	for _, tc := range testfiles {
		want, ok := tc.parsed.(PrivateKey)
		if !ok {
			continue
		}

		priv, err := ParsePrivateKey(tc.content, tc.passphrase)
		if err != nil {
			t.Errorf("%s: %s\n", tc.file, err)
			continue
		}

		if want != *priv {
			t.Errorf("%s: expected: %+v got: %+v\n", tc.file, want, priv)
		}
	}
}

func TestParsePrivateKeyErrors(t *testing.T) {
	tc := getTestFile(t, "_testdata/test.key")
	buf := make([]byte, len(tc.content))
	copy(buf, tc.content)

	_, err := ParsePrivateKey(buf[:16], tc.passphrase)
	if err == nil {
		t.Error("no error on incomplete input")
	}
	_, err = ParsePrivateKey(buf, []byte("wrong passphrase"))
	if err == nil {
		t.Error("no error with wrong passphrase")
	}
	buf[2] ^= 0x80
	_, err = ParsePrivateKey(buf, tc.passphrase)
	if err == nil {
		t.Error("no error on unknown KDFAlgo")
	}
	buf[2] ^= 0x80
	buf[0] ^= 0x80
	_, err = ParsePrivateKey(buf, tc.passphrase)
	if err == nil {
		t.Error("no error on unknown PKAlgo")
	}
}

func TestMarshalRawEncryptedKey(t *testing.T) {
	for _, tc := range testfiles {
		rek, ok := tc.parsedRaw.(rawEncryptedKey)
		if !ok {
			continue
		}
		raw := marshalRawEncryptedKey(&rek)
		if !bytes.Equal(raw, tc.content) {
			t.Errorf("%s: expected %x\ngot: %x\n", tc.file, tc.content, raw)
		}
	}
}

func TestEncryptPrivateKey(t *testing.T) {
	var passphrase = []byte("passphrase")

	_, priv, err := GenerateKey(rand.Reader)
	if err != nil {
		t.Fatal(err)
	}

	rek, err := encryptPrivateKey(priv, rand.Reader, passphrase, 1)
	if err != nil {
		t.Fatal(err)
	}

	if rek.PKAlgo != algoEd {
		t.Errorf("unexpected PKAlgo %x\n", rek.PKAlgo)
	}

	if rek.KDFAlgo != algoBcrypt {
		t.Errorf("unexpected KDFAlgo %x\n", rek.KDFAlgo)
	}

	if rek.KDFRounds != 1 {
		t.Errorf("unexpected KDFRounds %x\n", rek.KDFRounds)
	}

	if rek.Fingerprint != priv.Fingerprint {
		t.Errorf("fingerprint changed\n")
	}

	decpriv, err := decryptPrivateKey(rek, passphrase)
	if err != nil {
		t.Fatal(err)
	}
	if *priv != *decpriv {
		t.Errorf("expected: %+v\n got: %+v\n", priv, decpriv)
	}

	rek, err = encryptPrivateKey(priv, rand.Reader, passphrase, -1)
	if err != nil {
		t.Fatal(err)
	}
	if rek.KDFRounds != defaultKDFRounds {
		t.Error("KDFrounds < 0 should set KDFRounds = defaultKDFRounds")
	}

	rek, err = encryptPrivateKey(priv, rand.Reader, []byte{}, 1)
	if err != nil {
		t.Fatal(err)
	}
	if rek.KDFRounds != 0 {
		t.Error("empty passphrase should set KDFRounds = 0")
	}
}

func TestMarshalPrivateKey(t *testing.T) {
	var passphrase = []byte("passphrase")

	_, priv, err := GenerateKey(rand.Reader)
	if err != nil {
		t.Fatal(err)
	}

	raw, err := MarshalPrivateKey(priv, rand.Reader, passphrase, 1)
	if err != nil {
		t.Fatal(err)
	}
	ppriv, err := ParsePrivateKey(raw, passphrase)
	if err != nil {
		t.Error(err)
	}
	if *priv != *ppriv {
		t.Errorf("expected: %+v\ngot %+v\n", priv, ppriv)
	}
}

func TestParsePublicKey(t *testing.T) {
	for _, tc := range testfiles {
		want, ok := tc.parsed.(PublicKey)
		if !ok {
			continue
		}

		pub, err := ParsePublicKey(tc.content)
		if err != nil {
			t.Errorf("%s: %s\n", tc.file, err)
			continue
		}

		if want != *pub {
			t.Errorf("%s: expected: %+v got: %+v\n", tc.file, want, pub)
		}
	}
}

func TestParsePublicKeyErrors(t *testing.T) {
	tc := getTestFile(t, "_testdata/test.pub")
	buf := make([]byte, len(tc.content))
	copy(buf, tc.content)

	_, err := ParsePublicKey(buf[:16])
	if err == nil {
		t.Error("no error on incomplete input")
	}
	buf[0] ^= 0x80
	_, err = ParsePublicKey(buf)
	if err == nil {
		t.Error("no error on unknown PKAlgo")
	}
}

func TestMarshalPublicKey(t *testing.T) {
	for _, tc := range testfiles {
		pub, ok := tc.parsed.(PublicKey)
		if !ok {
			continue
		}
		content := MarshalPublicKey(&pub)
		if !bytes.Equal(content, tc.content) {
			t.Errorf("%s: expected: %+v got: %+v\n", tc.file, tc.content, pub)
		}
	}
}

func TestParseSignature(t *testing.T) {
	for _, tc := range testfiles {
		want, ok := tc.parsed.(Signature)
		if !ok {
			continue
		}

		sig, err := ParseSignature(tc.content)
		if err != nil {
			t.Errorf("%s: %s\n", tc.file, err)
			continue
		}

		if want != *sig {
			t.Errorf("%s: expected: %+v got: %+v\n", tc.file, want, sig)
		}
	}
}

func TestParseSignatureErrors(t *testing.T) {
	tc := getTestFile(t, "_testdata/test.msg.sig")
	buf := make([]byte, len(tc.content))
	copy(buf, tc.content)

	_, err := ParseSignature(buf[:16])
	if err == nil {
		t.Error("no error on incomplete input")
	}
	buf[0] ^= 0x80
	_, err = ParseSignature(buf)
	if err == nil {
		t.Error("no error on unknown PKAlgo")
	}
}

func TestMarshalSignature(t *testing.T) {
	for _, tc := range testfiles {
		sig, ok := tc.parsed.(Signature)
		if !ok {
			continue
		}
		content := MarshalSignature(&sig)
		if !bytes.Equal(content, tc.content) {
			t.Errorf("%s: expected: %+v got: %+v\n", tc.file, tc.content, sig)
		}
	}
}

func TestGenerateKey(t *testing.T) {

	pub, priv, err := GenerateKey(rand.Reader)
	if err != nil {
		t.Fatal(err)
	}

	if pub.Fingerprint != priv.Fingerprint {
		t.Error("pub/priv fingerprints don't match")
	}

	msg := []byte("testmsg")
	if !Verify(pub, msg, Sign(priv, msg)) {
		t.Error("verify failed")
	}
}

type signtest struct {
	priv string
	msg  string
	sig  string
}

var signtests = []signtest{
	{
		priv: "_testdata/test.key",
		msg:  "_testdata/test.msg",
		sig:  "_testdata/test.msg.sig",
	}, {
		priv: "_testdata/test.nopass.key",
		msg:  "_testdata/test.msg",
		sig:  "_testdata/test.nopass.msg.sig",
	},
}

func TestSign(t *testing.T) {
	for i, tc := range signtests {
		priv := getTestFile(t, tc.priv).parsed.(PrivateKey)
		want := getTestFile(t, tc.sig).parsed.(Signature)
		msg, err := ioutil.ReadFile(tc.msg)
		if err != nil {
			t.Fatal(err)
		}
		sig := Sign(&priv, msg)
		if want != *sig {
			t.Errorf("[%d] expected: %+v\ngot: %+v\n", i, want, sig)
		}
	}
}

type verifytest struct {
	pub string
	msg string
	sig string
	ok  bool
}

var verifytests = []verifytest{
	{
		pub: "_testdata/test.pub",
		msg: "_testdata/test.msg",
		sig: "_testdata/test.msg.sig",
		ok:  true,
	}, {
		pub: "_testdata/test.nopass.pub",
		msg: "_testdata/test.msg",
		sig: "_testdata/test.nopass.msg.sig",
		ok:  true,
	}, {
		pub: "_testdata/test.nopass.pub",
		msg: "_testdata/test.msg",
		sig: "_testdata/test.msg.sig",
		ok:  false,
	},
}

func TestVerify(t *testing.T) {
	for i, tc := range verifytests {
		pub := getTestFile(t, tc.pub).parsed.(PublicKey)
		sig := getTestFile(t, tc.sig).parsed.(Signature)
		msg, err := ioutil.ReadFile(tc.msg)
		if err != nil {
			t.Fatal(err)
		}
		ok := Verify(&pub, msg, &sig)
		if ok != tc.ok {
			t.Errorf("[%d] expected: %t got: %t", i, tc.ok, ok)
		}
	}
}
